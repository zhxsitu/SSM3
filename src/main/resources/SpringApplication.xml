<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mybatis-spring="http://mybatis.org/schema/mybatis-spring"
       xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd http://mybatis.org/schema/mybatis-spring http://mybatis.org/schema/mybatis-spring.xsd http://www.springframework.org/schema/aop https://www.springframework.org/schema/aop/spring-aop.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd">
    <!--        开启扫描-->
    <context:component-scan base-package="com.zhx">
        <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
    </context:component-scan>
    <!-- 引入数据库的配置文件 -->
    <context:property-placeholder location="classpath:DBConfig.properties"/>
    <!--    配置德鲁伊-->
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
        <!-- 基本属性 url、user、password -->
        <property name="driverClassName" value="${jdbc.driver}"/>
        <property name="url" value="${jdbc.url}"/>
        <property name="username" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>
    </bean>
    <!--************配置事务*************************-->
    <!--1.注册事务管理器(需要依赖数据源)-->
    <bean id="sourceTransactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <!--        控制住事务源-->
        <property name="dataSource" ref="dataSource"/>
    </bean>

    <!--    配置事务增强,事务如何启动-->    <!--2.配置事务建议(规则) 事务传播特性-->
    <tx:advice id="txAdvice" transaction-manager="sourceTransactionManager">
        <tx:attributes>
            <!--            代表这个方法切入的所有方法都是事务方法-->
            <tx:method name="*"/>
            <!--            以get开头的所有方法-->
            <tx:method name="get*" read-only="true"/>
        </tx:attributes>
    </tx:advice>
    <!--    开启基于注解的事务,使用xml配置,必要的内容都使用xml -->
    <aop:config>
        <!--        切入点表达式-->
        <aop:pointcut id="txPoint" expression="execution(* com.zhx.service..*.*(..))"/>
<!--        <aop:pointcut id="txPoint" expression="execution(* com.zhx.service..*(..))"/>-->
        <!--        配置增强-->
        <!--配置切入点: aop:pointcut 切入点: 标签配置参与事务的类-->
        <aop:advisor advice-ref="txAdvice" pointcut-ref="txPoint"/>
    </aop:config>
    <!--************配置事务结束**********************-->


    <!--    配置和maybatis的整合-->

    <!--创建出SqlSessionFactory对象  -->
    <bean id="sqlSessionFactoryBean" class="org.mybatis.spring.SqlSessionFactoryBean">
        <!--给工厂配置连接池数据源-->
        <property name="dataSource" ref="dataSource"></property>
        <!-- configLocation指定全局配置文件的位置 -->
        <property name="configLocation" value="classpath:mybatis-config.xml"></property>
        <!--mapperLocations: 指定mapper文件的位置-->
        <property name="mapperLocations" value="classpath:com/zhx/dao/mapper/*.xml"></property>
    </bean>

    <!--    配置扫描器,将mybatis接口的实现加入到ioc容器 两种写法-->
    <!--    <mybatis-spring:scan base-package="com.zhx.dao"/>-->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.zhx.dao"></property>
    </bean>
    <!--    配置一个批量的sqlSession-->
    <bean id="sessionTemplate" class="org.mybatis.spring.SqlSessionTemplate">
        <constructor-arg name="sqlSessionFactory" ref="sqlSessionFactoryBean"/>
        <constructor-arg name="executorType" value="BATCH"/>
    </bean>




    <!-- 开启基于注解的事务 -->
    <!--    <tx:annotation-driven transaction-manager="sourceTransactionManager"/>-->

</beans>